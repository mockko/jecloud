#!/usr/bin/env ruby
require 'commander/import'  # commander gem

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'jecloud'

program :name, 'JeCloud'
program :version, JeCloud::VERSION
program :description, 'Open cloud stack manager'

cli = JeCloud::CLI.new

command :init do |c|
  c.syntax = 'jecloud init <app_name>'
  c.description = 'Generate an initial version of cloud.yml and cloud-access.yml'
  c.action do |args, options|
    raise "init needs exactly one argument (the app name)" if args.size != 1
    app_name = args.first

    unless app_name =~ /^[a-z0-9-]+$/
      raise "app name has to consist only of lowercase letters, numbers and dashes"
    end

    dir = Dir.pwd
    cloud_yml     = File.join(dir, 'cloud.yml')
    access_yml    = File.join(dir, 'cloud-access.yml')
    access_yml_ex = File.join(dir, 'cloud-access.yml.example')
    git_ignore    = File.join(dir, '.gitignore')

    cloud_content = <<-EOS.gsub(/^ {6}/, '')
      # JeCloud configuration file for #{app_name}
      ec2_instance_type: t1.micro
      ec2_ami: ami-08728661  # Basic 32-bit Amazon Linux AMI 1.0
    EOS

    access_content = <<-EOS.gsub(/^ {6}/, '')
      app_name: #{app_name}
      aws:
        access_key_id: TODO
        secret_access_key: TODO
    EOS
    access_ex_comment = '# please copy this into cloud-access.yml and fill in the keys'

    git_ignore_content = (File.read(git_ignore) rescue '')

    File.open(cloud_yml, 'w')     { |f| f.write cloud_content }                            unless File.file?(cloud_yml)
    File.open(access_yml, 'w')    { |f| f.write access_content }                           unless File.file?(access_yml)
    File.open(access_yml_ex, 'w') { |f| f.puts access_ex_comment; f.write access_content } unless File.file?(access_yml_ex)
    File.open(git_ignore, 'w')    { |f| f.puts git_ignore_content.rstrip; f.puts File.basename(access_yml) } unless git_ignore_content =~ /^#{File.basename(access_yml)}$/
  end
end

command :'print-version' do |c|
  c.description = 'Print the version of JeCloud in a machine-readable format'
  c.action do |args, options|
    puts JeCloud::VERSION
  end
end

command :status do |c|
  c.description = 'Check the status of the cloud'
  c.action do |args, options|
    cli.status!
  end
end

command :fwd do |c|
  c.description = 'Roll forward any pending changes'
  c.action do |args, options|
    cli.roll_forward!
  end
end

command :deploy do |c|
  c.description = 'Deploy a new version of the app to the cloud'
  c.action do |args, options|
    cli.deploy! args
  end
end

command :terminate do |c|
  c.description = 'Terminate all the servers of your cloud'
  c.action do |args, options|
    exit 1 unless agree("Are you sure you want to PERMANENTLY destroy all running servers?")
    cli.terminate!
  end
end

command :'upload-git-ssh-key' do |c|
  c.syntax = 'jecloud upload-git-ssh-key private_key_file'
  c.description = 'Upload an SSH key that gives access to the source repository'
  c.action do |args, options|
    raise "upload-git-ssh-key accepts exactly one argument" if args.size != 1

    key_file = args.first
    raise "file #{key_file} does not exit" unless File.file?(key_file)
    cli.upload_repository_ssh_key! key_file
  end
end
